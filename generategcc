#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

tmptrap() { rm -rf "${TMPDIR:-}/projsetup.*"; }
trap tmptrap EXIT

log() { printf "[✓] %s\n" "$*"; }
warn() { printf "[!] %s\n" "$*"; }
error() { printf "[✗] %s\n" "$*" >&2; exit 1; }

require() { command -v "$1" &>/dev/null || error "Required '$1' not found."; }
require cmake; require mkdir; require sed; require uname

projectName=""
lang=""
autoYes=false
cxxStandard=17
asmCompiler=nasm

sanitizeName() { local n="${1// /_}"; echo "${n//[^A-Za-z0-9_-]/}"; } # probably a simpler way of doing this
getCores() { [[ $(uname -s) == Darwin* ]] && sysctl -n hw.logicalcpu || nproc; } # no mac, dont care to test. dont use mac.

# usage help
usage() 
{
	cat <<EOF
	Usage: $0 [options]
		-n | --name <project>   Project name
		-l | --lang <language>  Language: c / cpp / asm
		-y | --yes              Skip confirmation
		-h | --help             Show this help
EOF
	exit 1
}

# commands
while (( $# )); do
	case "$1" in
		-n|--name) [[ $# -ge 2 ]] || usage; projectName=$(sanitizeName "$2"); shift 2;;
		-l|--lang) [[ $# -ge 2 ]] || usage; lang="${2,,}"; shift 2;;
		-y|--noconfirm) autoYes=true; shift;;
		-h|--help) usage;;
		*) error "Unknown option: $1";;
	esac
done

# name prompt
while [[ -z $projectName ]]; do
	read -rp "Enter project name: " tmp
	projectName=$(sanitizeName "$tmp")
	[[ -z $projectName ]] && { warn "Name cannot be empty."; continue; }
	[[ -e $projectName ]] && { warn "Directory exists."; projectName=""; }
done

# language prompt
if [[ -z $lang ]]; then
	while :; do
		echo -e "Supported languages:\n- c\n- cpp\n- asm"
		read -rp "Enter language (c/cpp/asm) or 'exit': " lang
		lang="${lang,,}"
		case "$lang" in
			c|cpp|asm) break ;;
			exit|quit) log "Exiting."; exit ;;
			*) warn "Unsupported '$lang'." ;;
		esac
	done
else
	case "$lang" in
		c|cpp|asm) ;;  # valid, continue
		*) error "Unsupported language '$lang'" ;;
	esac
fi

# requirement check
case "$lang" in
	c) cmakeLang=C; ext=c ;;
	cpp) cmakeLang=CXX; ext=cpp; require g++ ;;
	asm) cmakeLang=ASM_NASM; ext=asm; require "$asmCompiler" ;;
esac

# confirm
cat <<EOF
Project: $projectName
Language: $lang
Directory: $(pwd)/$projectName
EOF
if ! $autoYes; then
	read -rp "Proceed? [Y/n]: " ans; ans="${ans,,}"
	[[ $ans =~ ^n ]] && { log "Aborted."; exit; }
fi

# dir initialization
log "Creating project structure..."
mkdir -p "$projectName"/{src,include,out}
cd "$projectName"

# samples
srcFile="src/main.$ext"
case "$lang" in
	c) cat >"$srcFile" <<'EOF'
#include <stdio.h>
int main(void){ puts("Hello, C World!"); return 0; }
EOF
	;;
	cpp) cat >"$srcFile" <<'EOF'
#include <iostream>
int main(){ std::cout<<"Hello, C++ World!\n"; return 0; }
EOF
	;;
	asm) cat >"$srcFile" <<'EOF' # pasted
global _start
section .data
	msg db "Hello, ASM World!",0x0A
	len equ $-msg
section .text
_start:
	mov rax,1; 
	mov rdi,1; 
	mov rsi,msg; 
	mov rdx,len; 
	syscall
	mov rax,60; 
	xor rdi,rdi; 
	syscall
EOF
	;;
esac
log "Added $srcFile"

# CMakeLists.txt
cat > CMakeLists.txt <<'CMAKE_EOF'
cmake_minimum_required(VERSION 3.16)
project(__PROJECT__ LANGUAGES __LANG__)

__STD_BLOCK__

add_compile_options(
	-Wall -Wextra -Wshadow -Wconversion -Wsign-conversion
	-Wcast-align -Wformat=2 -Wundef -Wstrict-prototypes
	-pedantic -fstack-protector-strong
)

file(GLOB_RECURSE PROJECT_SOURCES CONFIGURE_DEPENDS
	src/*.__EXT__
)

add_executable(${PROJECT_NAME} ${PROJECT_SOURCES})

target_include_directories(${PROJECT_NAME}
	PRIVATE ${CMAKE_SOURCE_DIR}/src
)

set_target_properties(${PROJECT_NAME} PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/out"
)

add_custom_target(run
	COMMAND "${CMAKE_SOURCE_DIR}/out/${PROJECT_NAME}"
	DEPENDS ${PROJECT_NAME}
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	COMMENT "Running ${PROJECT_NAME}"
)
CMAKE_EOF

# placeholders
sed -i "s/__PROJECT__/$projectName/" CMakeLists.txt
sed -i "s/__LANG__/$cmakeLang/" CMakeLists.txt
sed -i "s/__EXT__/$ext/" CMakeLists.txt

# dynamic cmakelist variables, a little jank but it works
if [[ $cmakeLang == CXX ]]; then
	sed -i "s#__STD_BLOCK__#set(CMAKE_CXX_STANDARD $cxxStandard)\\
set(CMAKE_CXX_STANDARD_REQUIRED ON)#" CMakeLists.txt
elif [[ $cmakeLang == C ]]; then
	sed -i 's#__STD_BLOCK__#set(CMAKE_C_STANDARD 11)\
set(CMAKE_C_STANDARD_REQUIRED ON)#' CMakeLists.txt
else
	sed -i 's/__STD_BLOCK__//' CMakeLists.txt
fi

log "Initializing git repository..."
git init -q
cat > .gitignore <<EOF
/out*/
/*.o
/*.obj
CMakeFiles/
CMakeCache.txt
cmake_install.cmake
Makefile
EOF

cores=$(getCores)
cat > build <<EOF
#!/usr/bin/env bash
set -euo pipefail
cmake -S . -B out -DCMAKE_BUILD_TYPE=\${1:-Release}
cmake --build out --parallel "$cores"
EOF
chmod +x build

log "Invoking initial build..."
./build

trap - ERR
log "Setup complete. Binary: out/$projectName"
